openapi: 3.0.0
info:
  description: |
    This is a sample Attacka Help server.  You can find
    out more about protject at the our
    [discord](https://discord.gg/GXSGbyQ3) server
  version: "0.1.1"
  title: Swagger Attacka Help
  contact:
    email: sergeyjuly@gmail.com
  license:
    name: Apache 2.0 or MIT or any other (We should choose)
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - description: For now only local server is possible
    url: "http://localhost:7000/api/v1"
tags:
  - name: cards
    description: Card is the main entity of the information carier.
  - name: auth
    description: Operations about user authorization.
  - name: feedback
    description: > 
      This is the endpoint through which the user can fill 
      out the form and send feedback.
  - name: slider
    description: >
      This is the endpoint to get the images for the main page slider.
  - name: partners
    description: >
      This is the endpoint through which you need to get
      partner logos to the main page. The administrator can also change them.
  - name: reports
    description: > 
      This is the endpoint through which the administrator
      should upload the document with the activity report.
  - name: contacts
    description: Alow to get and set contacts info
paths:
  /cards:
    get:
      tags:
        - cards
      summary: Returns the cards array
      operationId: getAllCards
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: integer
                    example: 200
                  total:
                    type: integer
                    example: 14
                  cards:
                    type: array
                    items:
                      $ref: "#/components/schemas/Card"
        "204": {$ref: "#/components/responses/NoContent"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
        "408": { $ref: "#/components/responses/Timeout" }
        "500": { $ref: "#/components/responses/InternalError" }
    post:
      tags:
        - cards
      summary: Add a new card to the store
      operationId: addCard
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - "thumb"
                - "title"
                - "alt"
                - "description"
              properties:
                thumb:
                  type: string
                  format: base64
                title:
                  type: string
                  minLength: 3
                  maxLength: 300
                alt:
                  type: string
                description:
                  required:
                    - "items"
                  type: array
                  items:
                    type: string  
            encoding:
              thumb:
                contentType: image/png, image/jpeg, image.jpg, image.webp      
      responses:
        "200": {$ref: "#/components/responses/Success"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: "#/components/responses/Unauthorized"}
        "408": {$ref: "#/components/responses/Timeout"}
        "500": {$ref: "#/components/responses/InternalError"}
      security:
        -  accessCookieAuth: []
  /cards/{id}:
    get:
      tags:
        - cards
      summary: Find card by ID
      operationId: getCardById
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFound"}
        "408": {$ref: "#/components/responses/Timeout"}
        "500": { $ref: "#/components/responses/InternalError" }
    delete:
      tags:
        - cards
      summary: Deletes a card
      operationId: deleteCard
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200": {$ref: "#/components/responses/Success"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "408": {$ref: "#/components/responses/Timeout"}
        "500": { $ref: "#/components/responses/InternalError" }
      security:
        -  accessCookieAuth: []
  
  /auth/login:
    post:
      tags:
        - auth
      summary: Logs in and returns the authentication  cookies
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - login
                - password
              properties:
                login:
                  type: string
                  format: email
                  example: admin@example.com
                password:
                  type: string
                  format: password
                  example: password1234
      responses:
        "200":
          description: >
            Successfully authenticated.
            The endpoint returns two named cookies `access-cookie` 
            and `refresh-cookie`. The `access-cookie` You need to include 
            this cookie in subsequent requests. And the `refresh-cookie` 
            You are required for refresh requests.
          headers: 
            Set-Cookie:
              schema: 
                type: string
                example: access-cookie=abcde12345; HttpOnly
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "408": {$ref: "#/components/responses/Timeout"}
        "500": { $ref: "#/components/responses/InternalError" }  
  /auth/logout:
    post:
      tags:
        - auth
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        "200": {$ref: "#/components/responses/Success"}
        "400": {$ref: "#/components/responses/BadRequest"}
        "401": {$ref: "#/components/responses/Unauthorized"}
        "408": {$ref: "#/components/responses/Timeout"}
        "500": {$ref: "#/components/responses/InternalError"}
      security: []
  /auth/refresh:
    post:
      tags:
        - auth
      summary: Logs in and returns the authentication  cookies
      operationId: refresh
      parameters:
        - in: cookie
          name: refresh-cookie
          description: You should provide the `refresh-cookie`
          schema:
            type: string
          required: true
      responses:
        "200":
          description: >
            Refresh.
            The endpoint returns two named cookies `access-cookie` 
            and `refresh-cookie`. The `access-cookie` You need to include 
            this cookie in subsequent requests. And the `refresh-cookie` 
            You are required for refresh requests.
          headers: 
            Set-Cookie:
              schema: 
                type: string
                example: access-cookie=abcde12345; HttpOnly
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalError" } 
  /auth/change:
    post:
      tags:
        - auth
      summary:  Password changing for authorized users
      operationId: changePassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
                - newPasswordConfirmed
              properties:
                currentPassword:
                  type: string
                  description: Current user password
                newPassword:
                  type: string
                  description: New user password
                  minLength: 8
                  maxLength: 14
                  pattern: "^[[:graph:]]{8,14}$"
                newPasswordConfirmed:
                  type: string
                  description: New user password confirmation
                  minLength: 8
                  maxLength: 14
                  pattern: "^[[:graph:]]{8,14}$"
      responses:
        "200": { $ref: "#/components/responses/Success" }
        "400": { $ref: "#/components/responses/BadRequest"}
        "401": { $ref: "#/components/responses/Unauthorized"}
        "408": {$ref: "#/components/responses/Timeout"}
        "500": { $ref: "#/components/responses/InternalError" }
      security:
        -  accessCookieAuth: []

  /feedback:
    post:
      tags:
        - feedback
      summary: To get feedback from users
      operationId: addFeedback
      requestBody:
        {$ref: "#/components/requestBodies/Feedback"}
      responses:
        "200": { $ref: "#/components/responses/Success"}
        "404": { $ref: "#/components/responses/Conflict"}
        "408": {$ref: "#/components/responses/Timeout"}
        "500": { $ref: "#/components/responses/InternalError"}
  
  /slider:
    get:
      tags:
        - slider
      summary:  Returns an array of the images for slider
      operationId: getAllSliderImages
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                      properties:
                        id:
                          type: string
                          example: "5a5d9f5c-1c7d-4374-86e1-2c9e01db3ce8"
                        title:
                          type: string
                          example: "Image Title"
                        thumb:
                          $ref: "#/components/schemas/Image"
                        alt:
                          type: string
                          example: "Some text instead of photo"
                        created:
                          type: string
                          example: "2006-01-02 15:04:05"
                        modified:
                          type: string
                          example: "2023-04-03 18:23:34"     
        "400": {$ref: "#/components/responses/BadRequest"}
        "404": {$ref: "#/components/responses/NotFound"}
        "408": {$ref: "#/components/responses/Timeout"}
        "500": {$ref: "#/components/responses/InternalError"}
    
    post:
      tags:
        - slider
      summary:  Endpoint adds the image for slider
      operationId: addSliderImage
      requestBody:
        {$ref: "#/components/requestBodies/SliderImage"}
      responses:
        "200": { $ref: "#/components/responses/Success"}
        "401": { $ref: "#/components/responses/Unauthorized"}
        "408": {$ref: "#/components/responses/Timeout"}
        "500": { $ref: "#/components/responses/InternalError"}
      security:
        -  accessCookieAuth: []
  
  /slider/{id}:
    delete:
      tags:
        - slider
      summary: Deletes a slide
      operationId: deleteSlider
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200": {$ref: "#/components/responses/Success"}
        "400": { $ref: "#/components/responses/BadRequest"}
        "401": { $ref: "#/components/responses/Unauthorized"}
        "408": {$ref: "#/components/responses/Timeout"}
        "500": { $ref: "#/components/responses/InternalError"}
      security:
        -  accessCookieAuth: []

  /partners:
    get:
      tags:
        - "partners"
      summary: Returns an array of the partners logos 
      operationId: getAllPartnersLogos
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Partner"
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
        "408": {$ref: "#/components/responses/Timeout"}
        "500": { $ref: "#/components/responses/InternalError" }
    
    post:
      tags:
        - partners
      summary:  Endpoint adds the partner logo
      operationId: addPartnerLogo
      requestBody:
        $ref: "#/components/requestBodies/Partner"
      responses:
        "200": { $ref: "#/components/responses/Success" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "408": {$ref: "#/components/responses/Timeout"}
        "500": { $ref: "#/components/responses/InternalError" }
      security:
        -  accessCookieAuth: []
    
  /partners/{id}:
    delete: 
      tags:
        - partners
      summary:  Delete the parthers logo
      operationId: deletePartner
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200": { $ref: "#/components/responses/Success" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "408": {$ref: "#/components/responses/Timeout"}
        "500": { $ref: "#/components/responses/InternalError" }
      security:
        -  accessCookieAuth: []
  
  /reports:
    get: 
      tags:
        - reports
      summary:  Return the report
      operationId: getReports
      responses:
        "200":
          description: A successful response with document inside.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Report"
        "204": { $ref: "#/components/responses/PartialContent" }
        "408": {$ref: "#/components/responses/Timeout"}
        "500": { $ref: "#/components/responses/InternalError" }

    put: 
      tags:
        - reports
      summary:  It should recieve the report objects and changes the old one to the new one (replace with new) 
      operationId: editeReports
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - "thumb"
              properties:
                thumb:
                  type: string
                  format: binary
            encoding:
              report:
                contentType: application/pdf
      responses:
        "201": { $ref: "#/components/responses/Created" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalError" }
      security:
        -  accessCookieAuth: []

    delete: 
      tags:
        - reports
      summary: Just delete the report file. 
      operationId: deleteReports
      responses:
        "200": { $ref: "#/components/responses/Created" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "408": {$ref: "#/components/responses/Timeout"}
        "500": { $ref: "#/components/responses/InternalError" }
      security:
        -  accessCookieAuth: []

  /contacts:
    get:
      tags:
        - contacts
      summary: Get contacts
      operationId: getContacts
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { $ref: "#/components/responses/NotFound"}
        "408": {$ref: "#/components/responses/Timeout"}
        "500": { $ref: "#/components/responses/InternalError" }
    
    put:
      tags:
        - contacts
      summary: Update contacts
      operationId: updateContacts
      requestBody:
        $ref: "#/components/requestBodies/Contact"
      responses:
        "200": {$ref: "#/components/responses/Success"}
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "408": {$ref: "#/components/responses/Timeout"}
        "500": { $ref: "#/components/responses/InternalError" }
      security:
        -  accessCookieAuth: []

components:
  schemas:
    Report:
      type: object
      description: Represents a simple pdf file
      required:
        - file
      properties:
        file:
          type: string
          format: binary
          pattern: "^.*\\.pdf$"
          description: Maximum file size must not exceed 2MB

    Slider:
      type: object
      required:
        - title
        - thumb
        - alt
      properties:
        title:
          type: string
          minLength: 4
          maxLength: 300
          example: "Slider title"
        thumb:
          $ref: "#/components/schemas/Image"
        alt:
          type: string
          minLength: 10
          maxLength: 30
          example: "Some text instead of photo"
  
    Partner:
      type: object
      description: Represent object of the partner with the partner thumb
      required:
        - title
        - thumb
        - alt
      properties:
        title:
          type: string
          example: "Partner title"
        thumb:
          $ref: "#/components/schemas/Image"
        alt:
          type: string
          minLength: 10
          maxLength: 30
          example: "Some text instead of thumb"

    Feedback:
      type: object
      description: Represents feedback object
      required:
        - name
        - emailAddress
        - comment
      properties:
        name:
          type: string
          example: Vasyl Petrenko
          minLength: 2
          maxLength: 50
        emailAddress:
          type: string
          description: >
            Email must contain the symbol @ and must not contain 
            ru-domains such as mail.ru, yandex.ru, list.ru
          format: email
          pattern: "^(?!.*\\.ru$)"
          example: vasya@example.com
        comment:
          type: string
          description: The main information about some problem
          format: text
          minLength: 1
          maxLength: 300
    
    Instruction:
      type: object
      description: Minimal quantity of information
      required:
        - text
      properties:
        text:
          type: string
          description: The main information about some problem
          format: text
    
    User:
      type: object
      required:
        - email
        - firstName
        - password
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
          uniqueItems: true
          example: "JhonSnow@example.com"
        firstName:
          type: string
          example: "Jhon"
        lastName:
          type: string
          example: "Snow"
        password:
          type: string
          format: password
          minLength: 8
          maxLength: 14
          pattern: "^[[:graph:]]{8,14}$"
          example: "12345678AbcdE"
    
    Card:
      type: object
      required:
        - title
        - thumb
        - instructions
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          minLength: 3
          maxLength: 300
          example: I was hacked
        thumb:
          type: string
          example: static/uploads/some.jpg
        desctiptions:
          type: array
          items:
            $ref: "#/components/schemas/Instruction"
    
    Image:
      type: object
      required:
        - file
        - path
      properties:
        file:
          type: string
          format: binary
          pattern: "^.*\\.(jpg|jpeg|webP|png|svg)$"
          description: Maximum file size must not exceed 5MB
        id:
          type: string
          format: uuid
          uniqueItems: true
        path:
          type: string
          format: path
          example: ./assets/cards/image1.png
          # To avoid the identical file titles
          uniqueItems: true
    
    TokenPair:
      type: object
      properties:
        access-token:
          type: string
          format: JWT
        refresh-token:
          type: string
          format: uuid
    
    Contact:
      type: object
      required:
        - phone1
        - phone2
        - email
      properties:
        phone1:
          type: string
        phone2:
          type: string
        email:
          type: string
       
  requestBodies:
    Report:
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/Report"
      description: Partner object that needs to be added to the server
      
    Partner:
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/Partner"
      description: Partner object that needs to be added to the server
    
    SliderImage:
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/Slider"
      description: Slider image object that needs to be added to the server
    
    Feedback:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Feedback"
      description: Feedback object that needs to be added to the server
    
    Card:
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/Card"
      description: Card object that needs to be added to the server
    
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
      description: List of user objects
      required: true
    
    Contact:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Contact"
      description: Contact object that needs to be added to the server
  
  securitySchemes:
    accessCookieAuth:         # arbitrary name for the security scheme; will be used in the "security" key later
      type: apiKey
      in: cookie
      name: access-cookie
    refreshCookieAuth:         # arbitrary name for the security scheme; will be used in the "security" key later
      type: apiKey
      in: cookie
      name: refresh-cookie
  
  parameters:
    id:
      name: id
      in: path
      description: Unique identifier for the object
      required: true
      schema:
          type: string
          format: uuid
          
    page:
      name: page
      in: query
      description: >
       Is a parameter used in pagination to specify the starting point 
       from where the data should be fetched.
      schema:
        type: integer
        minimum: 0
        example: 0
        
    limit:
      name: limit
      in: query
      description: >
       Specifies the number of the objects 
       to be displayed
      schema:
        type: integer
        minimum: 1
        maximum: 50
        example: 5
         
  responses:
    Success:
      description: A successful response
      content:
        application/json:
          schema:
            type: object
            required:
              - status
              - message
            properties:
              status: 
                type: integer
                example: 200
              message:
                type: string
                example: successfull
    Created:
      description: Resource was created
      content:
        application/json:
          schema:
            type: object
            required:
              - status
              - message
            properties:
              status: 
                type: integer
                example: 201
              message:
                type: string
                example: created
    NoContent:
      description: Resource has no content
      content:
        application/json:
          schema:
            type: object
            required:
              - status
              - message
            properties:
              status:
                type: integer
                example: 204
              message:
                type: string
                example: no content
    BadRequest:
      description: >
        It indicates that the server can not or will not process the request
        due to an apparent client error
      content:
        application/json:
          schema:
            type: object
            required:
              - status
              - message
            properties:
              status:
                type: integer
                example: 400
              message:
                type: string
                example: bad request error
    Timeout:
      description: It indicates that the server stop execution due to timeout
      content:
        application/json:
          schema:
            type: object
            required:
              - status
              - message
            properties:
              status:
                type: integer
                example: 408
              message:
                type: string
                example: timeout
    Unauthorized:
        description: >
          It indicates that the client must authenticate itself to get the 
          requested response. 
        content:
          application/json:
            schema:
              type: object
              required:
                - status
                - message
              properties:
                status:
                  type: integer
                  example: 401
                message:
                  type: string
                  example: you are not authorized
    Forbiden:
        description: >
          It indicates that the server understands the request, 
          but refuses to authorize it. 
        content:
          application/json:
            schema:
              type: object
              required:
                - status
                - message
              properties:
                status:
                  type: integer
                  example: 403
                message:
                  type: string
                  example: the request not forbiden
    NotFound:
        description: When an object is not found
        content:
          application/json:
            schema:
              type: object
              required:
                - status
                - message
              properties:
                status:
                  type: integer
                  example: 404
                message:
                  type: string
                  example: not found error
    PartialContent:
        description: When nothing to return

    NotAllowedMethot:
        description: A 405 error status code means "Method Not Allowed"
        content:
          application/json:
            schema:
              type: object
              required:
                - status
                - message
              properties:
                status:
                  type: integer
                  example: 405
                message:
                  type: string
                  example: the method not allowed
    Conflict:
        description: >
          If the object is already in the database and cannot 
          be added because of some unique restriction. Or the same situation 
          with editing of the some object. One more case the code can be returned 
          if call delete operetion but there are some dependencies which conflict 
          with the deleting.
        content:
          application/json:
            schema:
              type: object
              required:
                - status
                - message
              properties:
                status:
                  type: integer
                  example: 409
                message:
                  type: string
                  example: >
                    there is some conflinct and the operation
                    can"t be executed
    InternalError:
        description: Bad Request
        content:
          application/json:
            schema:
              type: object
              required:
                - status
                - message
              properties:
                status:
                  type: integer
                  example: 500
                message:
                  type: string
                  example: some internal error